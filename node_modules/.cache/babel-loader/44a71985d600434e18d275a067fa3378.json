{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCwpm_HAIr1-fhZQQtzckGPYZvJXaGOwIw\",\n  authDomain: \"avi-clothing-db.firebaseapp.com\",\n  databaseURL: \"https://avi-clothing-db.firebaseio.com\",\n  projectId: \"avi-clothing-db\",\n  storageBucket: \"avi-clothing-db.appspot.com\",\n  messagingSenderId: \"637678998586\",\n  appId: \"1:637678998586:web:489ba628eae3ccadf11103\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n\nconst convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map();\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/avitoshtotaram/Udemy_Classes/react_app/avi-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,iCAFD;AAGXC,EAAAA,WAAW,EAAE,wCAHF;AAIXC,EAAAA,SAAS,EAAE,iBAJA;AAKXC,EAAAA,aAAa,EAAE,6BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE;AAPI,CAAf;AAUAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB;AAIA,OAAO,MAAMS,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAqC;AAC1E,MAAI,CAACD,QAAL,EAAe;AACf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAClB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AACDC,QAAAA,KADC;AACMC,QAAAA,SADN;AACiB,WAAGV;AADpB,OAAZ,CAAN;AAGH,KAJD,CAIE,OAAOa,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AAEH;AAEJ;;AACD,SAAOf,OAAP;AAEH,CArBM;AAuBP,OAAO,MAAMgB,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAuC;AAC5E,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAqBD,GAArB;AACH,GAHD;AAIA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACH,CATM;;AAWP,MAAMC,+BAA+B,GAAIC,WAAD,IAAiB;AACrD,QAAMC,qBAAqB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,EAA9B;AAGC,CAJL;;AASA,OAAO,MAAMC,IAAI,GAAG5C,QAAQ,CAAC4C,IAAT,EAAb;AACP,OAAO,MAAM9B,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAM+B,QAAQ,GAAG,IAAI7C,QAAQ,CAAC4C,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAIP,eAAe7C,QAAf","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n\nconst config = {\n    apiKey: \"AIzaSyCwpm_HAIr1-fhZQQtzckGPYZvJXaGOwIw\",\n    authDomain: \"avi-clothing-db.firebaseapp.com\",\n    databaseURL: \"https://avi-clothing-db.firebaseio.com\",\n    projectId: \"avi-clothing-db\",\n    storageBucket: \"avi-clothing-db.appspot.com\",\n    messagingSenderId: \"637678998586\",\n    appId: \"1:637678998586:web:489ba628eae3ccadf11103\"\n}\n\nfirebase.initializeApp(config);\n\n\n\nexport const createUserProfileDocument = async (userAuth, additionalData ) => {\n    if (!userAuth) return;\n    const userRef = firestore.doc(`users/${userAuth.uid}`)\n    const snapShot = await userRef.get();    \n    \n    if (!snapShot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName, email, createdAt, ...additionalData\n            })\n        } catch (error) {\n            console.log('error creating user', error.message)\n\n        }\n\n    }\n    return userRef\n   \n}\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey)\n\n    const batch = firestore.batch()\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc()\n        batch.set(newDocRef, obj)\n    })\n    return await batch.commit()\n}\n\nconst convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollection = collections.docs.map(\n            \n        )\n    }\n\n\n\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}